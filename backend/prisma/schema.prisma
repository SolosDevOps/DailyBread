generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique 
  email     String   @unique
  password  String
  // OAuth provider IDs (optional)
  googleId  String?  @unique
  facebookId String? @unique
  bio       String?
  profilePicture String?
  coverImage String?
  coverImagePosition String? // JSON string like "{x: 0, y: 0}" for positioning
  createdAt DateTime @default(now())
  posts     Post[]
  likes     Like[]
  comments  Comment[]
  friendRequestsSent     FriendRequest[] @relation("friendRequestsFrom")
  friendRequestsReceived FriendRequest[] @relation("friendRequestsTo")
  friendshipsA           Friendship[]    @relation("friendshipUserA")
  friendshipsB           Friendship[]    @relation("friendshipUserB")
  followers              Follow[]        @relation("UserFollowers")
  following              Follow[]        @relation("UserFollowing")
  notifications          Notification[]  @relation("UserNotifications")
  notificationsTriggered Notification[]  @relation("NotificationTrigger")
  bibleBookmarks         BibleBookmark[]
  bibleHighlights        BibleHighlight[]
  bibleReadingHistory    BibleReadingHistory[]
  bibleReadingPlan       BibleReadingPlan?
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  likes     Like[]
  comments  Comment[]
  notifications Notification[]
  createdAt DateTime @default(now())
}

model Like {
  id     Int  @id @default(autoincrement())
  userId Int
  postId Int
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String
  userId  Int
  postId  Int
  user    User   @relation(fields: [userId], references: [id])
  post    Post   @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model FriendRequest {
  id        Int      @id @default(autoincrement())
  fromId    Int
  toId      Int
  status    String
  createdAt DateTime @default(now())
  fromUser  User     @relation("friendRequestsFrom", fields: [fromId], references: [id])
  toUser    User     @relation("friendRequestsTo", fields: [toId], references: [id])
}

model Friendship {
  id        Int      @id @default(autoincrement())
  userA     Int
  userB     Int
  createdAt DateTime @default(now())
  userAUser User     @relation("friendshipUserA", fields: [userA], references: [id])
  userBUser User     @relation("friendshipUserB", fields: [userB], references: [id])

  @@unique([userA, userB])
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id])
  following   User     @relation("UserFollowing", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int
  triggeredBy Int
  type        String   // 'like', 'comment', 'follow'
  message     String
  postId      Int?     // null for follows
  seen        Boolean  @default(false)
  seenAt      DateTime?
  createdAt   DateTime @default(now())
  user        User     @relation("UserNotifications", fields: [userId], references: [id])
  triggerUser User     @relation("NotificationTrigger", fields: [triggeredBy], references: [id])
  post        Post?    @relation(fields: [postId], references: [id])
}

model BibleBookmark {
  id        Int      @id @default(autoincrement())
  userId    Int
  book      String
  chapter   Int
  verse     Int
  text      String
  note      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, book, chapter, verse])
}

model BibleHighlight {
  id        Int      @id @default(autoincrement())
  userId    Int
  book      String
  chapter   Int
  verse     Int
  text      String
  color     String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, book, chapter, verse])
}

model BibleReadingHistory {
  id       Int      @id @default(autoincrement())
  userId   Int
  book     String
  chapter  Int
  dateRead DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, book, chapter, dateRead])
}

model BibleReadingPlan {
  id              Int      @id @default(autoincrement())
  userId          Int
  planId          String
  planName        String
  planDescription String
  duration        Int
  startDate       DateTime @default(now())
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])
  progress        BibleReadingProgress[]

  @@unique([userId])
}

model BibleReadingProgress {
  id             Int              @id @default(autoincrement())
  readingPlanId  Int
  day            Int
  completed      Boolean          @default(false)
  completedAt    DateTime?
  readingPlan    BibleReadingPlan @relation(fields: [readingPlanId], references: [id])

  @@unique([readingPlanId, day])
}
